plugins {
	id 'org.quiltmc.loom' version '1.2.+'
	id 'java-library'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.+'
	id 'org.quiltmc.gradle.licenser' version '2.0.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name
Set<String> qslModules = [
		'core:qsl_base',
		'core:crash_info',
		'core:lifecycle_events',
		'core:resource_loader',
		'gui:tooltip',
		'entity:entity_events'
]
Set<String> modules = [
		'fabric-api-base',
		'fabric-lifecycle-events-v1',
		'fabric-key-binding-api-v1',
		'fabric-rendering-v1',
		'fabric-resource-loader-v0'
]

// This field defines the Java version your mod target.
def targetJavaVersion = 17

String getMCVersionString() {
		return project.minecraft_version
}

repositories {
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name 'Jitpack'
		url 'https://jitpack.io'
	}
	mavenCentral()
}

configurations {
	shadow
	api.extendsFrom shadow
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	qslModules.stream().map { "org.quiltmc.qsl.${it}:${project.qsl_version}+${minecraft_version}" }.forEach {
		modImplementation it
		include it
	}
	modules.stream().map { "org.quiltmc.quilted-fabric-api:${it}:${project.fabric_api_version}-${minecraft_version}" }.forEach {
		modImplementation it
		include it
	}

	include(modImplementation("dev.lambdaurora:spruceui:${project.spruceui_version}") {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	})
	include(modImplementation("io.github.queerbric:pridelib:${project.pridelib_version}") {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	})

	shadow 'com.electronwill.night-config:core:3.6.6'
	shadow "com.electronwill.night-config:toml:3.6.6"
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('quilt.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('codeformat/HEADER')
	include '**/*.java'
}

shadowJar {
	dependsOn jar
	configurations = [project.configurations.shadow]
	destinationDirectory.set(file("${project.buildDir}/devlibs"))
	archiveClassifier.set('dev')

	relocate 'com.electronwill.nightconfig', 'dev.lambdaurora.lambdamap.shadow.nightconfig'
}
remapJar.dependsOn(shadowJar)

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}